module vault::vault_basic {
    use std::signer;
    use std::table::{Self, Table};
    use aptos_framework::timestamp;

    // ===== ERRORS =====
    const ENOT_VAULT_MANAGER: u64 = 1;
    const ENOT_FUND_MANAGER: u64 = 2;
    const EVAULT_NOT_FOUND: u64 = 3;
    const EINSUFFICIENT_SHARES: u64 = 4;
    const EINSUFFICIENT_ASSETS: u64 = 5;
    const EVAULT_INACTIVE: u64 = 6;
    const EINVALID_AMOUNT: u64 = 7;

    // ===== USDT ADDRESS =====
    const USDT_ADDRESS: address = @0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa;

    // ===== STRUCTS =====
    
    /// Main vault resource (ERC4626 equivalent)
    struct VaultResource has key {
        id: u64,
        total_shares: u64,
        total_assets: u64,
        denomination_asset: address,
        fund_manager: address,
        fee_rate: u64, // basis points (1/10000)
        is_active: bool,
        created_at: u64,
    }

    /// User's vault shares (ERC4626 shares equivalent)
    struct VaultShares has key, store {
        vault_id: u64,
        shares: u64,
        owner: address,
    }

    /// Vault registry to track all vaults
    struct VaultRegistry has key {
        vaults: Table<u64, address>, // vault_id -> vault_address
        next_vault_id: u64,
    }

    // ===== INITIALIZATION =====

    /// Initialize the vault module
    fun init_module(account: &signer) {
        // Initialize vault registry
        move_to(account, VaultRegistry {
            vaults: table::new(),
            next_vault_id: 0,
        });
    }

    // ===== VAULT MANAGEMENT =====

    /// Create a new vault (ERC4626 vault creation)
    public entry fun create_vault(
        vault_manager: &signer,
        denomination_asset: address,
        fund_manager: address,
        fee_rate: u64,
    ) acquires VaultRegistry {
        let vault_manager_addr = signer::address_of(vault_manager);
        
        // Get next vault ID
        let registry = borrow_global_mut<VaultRegistry>(@vault);
        let vault_id = registry.next_vault_id;
        registry.next_vault_id = registry.next_vault_id + 1;
        
        // Register vault
        table::add(&mut registry.vaults, vault_id, vault_manager_addr);
        
        // Initialize vault resource (ERC4626 vault state)
        move_to(vault_manager, VaultResource {
            id: vault_id,
            total_shares: 0,
            total_assets: 0,
            denomination_asset,
            fund_manager,
            fee_rate,
            is_active: true,
            created_at: timestamp::now_seconds(),
        });
    }

    // ===== ERC4626 CORE FUNCTIONS =====

    /// Deposit assets into vault (ERC4626 deposit)
    public entry fun deposit(
        user: &signer,
        vault_id: u64,
        amount: u64,
    ) acquires VaultRegistry, VaultResource, VaultShares {
        let user_addr = signer::address_of(user);
        
        // Validate amount
        assert!(amount > 0, EINVALID_AMOUNT);
        
        // Get vault resource
        let vault_addr = get_vault_address(vault_id);
        let vault = borrow_global_mut<VaultResource>(vault_addr);
        
        // Check if vault is active
        assert!(vault.is_active, EVAULT_INACTIVE);
        
        // (Không thao tác coin thực tế, chỉ cập nhật số dư logic)
        // Calculate shares to mint (ERC4626 convertToShares logic)
        let shares_to_mint = if (vault.total_shares == 0) {
            // First deposit: shares = amount
            amount
        } else {
            // Subsequent deposits: shares = (amount * total_shares) / total_assets
            (amount * vault.total_shares) / vault.total_assets
        };
        
        // Update vault state
        vault.total_assets = vault.total_assets + amount;
        vault.total_shares = vault.total_shares + shares_to_mint;
        
        // Mint shares to user
        if (!exists<VaultShares>(user_addr)) {
            move_to(user, VaultShares {
                vault_id,
                shares: 0,
                owner: user_addr,
            });
        };
        
        let user_shares = borrow_global_mut<VaultShares>(user_addr);
        user_shares.shares = user_shares.shares + shares_to_mint;
    }

    // ===== VIEW FUNCTIONS =====

    /// Get vault info
    public fun get_vault_info(vault_id: u64): (u64, u64, u64, address, address, u64, bool, u64) acquires VaultResource {
        let vault_addr = get_vault_address(vault_id);
        let vault = borrow_global<VaultResource>(vault_addr);
        (
            vault.id,
            vault.total_shares,
            vault.total_assets,
            vault.denomination_asset,
            vault.fund_manager,
            vault.fee_rate,
            vault.is_active,
            vault.created_at,
        )
    }

    /// Get user balance
    public fun balance_of(user_address: address, vault_id: u64): u64 acquires VaultShares {
        if (exists<VaultShares>(user_address)) {
            let user_shares = borrow_global<VaultShares>(user_address);
            if (user_shares.vault_id == vault_id) {
                user_shares.shares
            } else {
                0
            }
        } else {
            0
        }
    }

    /// Convert shares to assets
    public fun convert_to_assets(vault_id: u64, shares: u64): u64 acquires VaultResource {
        let vault_addr = get_vault_address(vault_id);
        let vault = borrow_global<VaultResource>(vault_addr);
        
        if (vault.total_shares == 0) {
            0
        } else {
            (shares * vault.total_assets) / vault.total_shares
        }
    }

    /// Convert assets to shares
    public fun convert_to_shares(vault_id: u64, assets: u64): u64 acquires VaultResource {
        let vault_addr = get_vault_address(vault_id);
        let vault = borrow_global<VaultResource>(vault_addr);
        
        if (vault.total_assets == 0) {
            assets
        } else {
            (assets * vault.total_shares) / vault.total_assets
        }
    }

    /// Get total assets
    public fun total_assets(vault_id: u64): u64 acquires VaultResource {
        let vault_addr = get_vault_address(vault_id);
        let vault = borrow_global<VaultResource>(vault_addr);
        vault.total_assets
    }

    /// Get total shares
    public fun total_shares(vault_id: u64): u64 acquires VaultResource {
        let vault_addr = get_vault_address(vault_id);
        let vault = borrow_global<VaultResource>(vault_addr);
        vault.total_shares
    }

    /// Get USDT address
    public fun get_usdt_address(): address {
        USDT_ADDRESS
    }

    // ===== HELPER FUNCTIONS =====

    /// Get vault address
    public fun get_vault_address(vault_id: u64): address acquires VaultRegistry {
        let registry = borrow_global<VaultRegistry>(@vault);
        *table::borrow(&registry.vaults, vault_id)
    }

    /// Execute a trade (placeholder)
    public fun execute_trade(vault_id: u64, trade_id: u64, token_in: address, token_out: address, amount_in: u64, amount_out: u64) {
        // Placeholder implementation
        let _ = vault_id;
        let _ = trade_id;
        let _ = token_in;
        let _ = token_out;
        let _ = amount_in;
        let _ = amount_out;
    }
} 